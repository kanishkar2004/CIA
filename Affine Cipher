int mod_inverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return 1;
}

void affine_encrypt(char *plain_text, int a, int b, char *cipher_text) {
    int i = 0;
    while (plain_text[i] != '\0') {
        if (isalpha(plain_text[i])) {
            int shift_base = isupper(plain_text[i]) ? 65 : 97;
            cipher_text[i] = ((a * (plain_text[i] - shift_base) + b) % 26) + shift_base;
        } else {
            cipher_text[i] = plain_text[i];
        }
        i++;
    }
    cipher_text[i] = '\0';
}

void affine_decrypt(char *cipher_text, int a, int b, char *plain_text) {
    int i = 0;
    int a_inv = mod_inverse(a, 26);
    
    while (cipher_text[i] != '\0') {
        if (isalpha(cipher_text[i])) {
            int shift_base = isupper(cipher_text[i]) ? 65 : 97;
            int value = (a_inv * ((cipher_text[i] - shift_base - b) % 26 + 26)) % 26;
            plain_text[i] = value + shift_base;
        } else {
            plain_text[i] = cipher_text[i];
        }
        i++;
    }
    plain_text[i] = '\0';
}
